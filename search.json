[{"title":"leetcode-2024-3-27","path":"/2024/03/27/leetcode-2024-3-27/","content":"2580 统计将重叠区间合并成组的方案数（Medium）给你一个二维整数数组 ranges ，其中 ranges[i] &#x3D; [starti, endi] 表示 starti 到 endi 之间（包括二者）的所有整数都包含在第 i 个区间中。 你需要将 ranges 分成 两个 组（可以为空），满足： 每个区间只属于一个组。两个有 交集 的区间必须在 同一个 组内。如果两个区间有至少 一个 公共整数，那么这两个区间是 有交集 的。 比方说，区间 [1, 3] 和 [2, 5] 有交集，因为 2 和 3 在两个区间中都被包含。请你返回将 ranges 划分成两个组的 总方案数 。由于答案可能很大，将它对 109 + 7 取余 后返回。 示例 1： 输入：ranges &#x3D; [[6,10],[5,15]]输出：2解释：两个区间有交集，所以它们必须在同一个组内。所以有两种方案： 将两个区间都放在第 1 个组中。 将两个区间都放在第 2 个组中。 区间合并+组合数 思路是将里面的区间先合并，得到长度。然后就相当于两个桶子，最终的结果为组合数相加，也就是一个杨辉三角，那么一行的总数就是2^n 区间合并：设置一个动态数组，首先按照左括号排序，接着从后往前遍历，如果两个区间存在重合，就把后面的删除，前面的改成合并以后的新区间。 这样主要是可以避免下标的影响，从前面遍历删除会乱序号 但是这样还不够，比如这个例子[[2,3],[4,5],[6,7],[8,9],[1,10]]，排序以后[[1,10],[2,3],[4,5],[6,7],[8,9]]，这样以来排序也没用，结果是[[1,10],[4,5],[6,7],[8,9]]，面对这种情况需要多循环几次，每次减少1个，当长度不再变化的时候就停止 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class Solution &#123; public int countWays(int[][] ranges) &#123; int MOD = 1000000007; int length = merge(ranges).length; int ans = 1; for (int i = 0; i &lt; length; i++) &#123; ans = ans *2%MOD; &#125; return ans; &#125; /** * 合并区间的代码 * @param intervals * @return */ public int[][] merge(int[][] intervals)&#123; int[][] temp1 = mergeTemp(intervals); int[][] temp2 = mergeTemp(temp1); while (temp1.length != temp2.length)&#123; temp1 = mergeTemp(temp2); temp2 = mergeTemp(temp1); &#125; return temp1; &#125; public int[][] mergeTemp(int[][] intervals) &#123; //先排序 Arrays.sort(intervals, new Comparator&lt;int[]&gt;() &#123; @Override public int compare(int[] o1, int[] o2) &#123; if(o1[0]==o2[0])&#123; return o1[1] - o2[1]; &#125; return o1[0] - o2[0]; &#125; &#125;); List&lt;int[]&gt; arrList = new ArrayList&lt;&gt;(); int rear = intervals.length-1; for (int[] interval : intervals) &#123; arrList.add(interval); &#125; while (rear &gt; 0)&#123; int[] front = arrList.get(rear-1); int[] behind = arrList.get(rear); int temp; if (front[1] &gt;= behind[0])&#123; temp = Math.max(front[1],behind[1]); arrList.set(rear-1,new int[]&#123; arrList.get(rear-1)[0],temp &#125;); arrList.remove(rear); rear--; &#125; else rear--; &#125; int[][] ans = new int[arrList.size()][2]; for (int i = 0; i &lt; arrList.size(); i++) &#123; ans[i] = arrList.get(i); &#125; return ans; &#125;&#125; 当初在做合并区间的时候就有点侥幸了，这个题后续还要多看 25 K个一组翻转链表(Hard)给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。 k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换 其实也没那么Hard，就是麻烦了一点 模拟12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182class Solution &#123; public ListNode reverseKGroup(ListNode head, int k) &#123; //如果间隔是1，那么就不进行下面的逻辑直接返回 if (k==1)&#123; return head; &#125; ListNode p = head; //首先遍历统计节点数 int count = 0; while (p!=null)&#123; count++; p = p.next; &#125; p = head; ListNode pre = head; List&lt;ListNode&gt; listNodes = new ArrayList&lt;&gt;(); //对于每一个完整的组，不完整的直接接在尾部就行 for (int i = 1; i &lt;= count / k; i++) &#123; //pre找的是下一个的完整组的头节点，也就是下个p pre = getNext(pre,k); //将反转后的头节点放进数组保存 listNodes.add(reverse(p,k)); p = pre; &#125; //遍历数组，一段一段接起来 ListNode temp = listNodes.get(0); for (int i = 0; i &lt; listNodes.size()-1; i++) &#123; temp= listNodes.get(i); while (temp.next != null)&#123; temp = temp.next; &#125; temp.next = listNodes.get(i+1); &#125; //这里最后一段还没遍历，为了找到尾指针接上落单的那几个节点 while (temp.next != null)&#123; temp = temp.next; &#125; //接上落单的几个节点 temp.next = pre; //返回最终的头节点 ListNode ans = listNodes.get(0); return listNodes.get(0); &#125; /** * 返回下一段的头节点 * @param p * @param k * @return */ public ListNode getNext(ListNode p,int k)&#123; for (int i = 0; i &lt; k; i++) &#123; p = p.next; &#125; return p; &#125; /** * 反转当前段 * @param head 原顺序的第一个节点 * @param k 本段长多少 * @return 返回这一段反转完的头节点 */ public ListNode reverse(ListNode head,int k)&#123; //首先返回的头节点肯定是动过的，头节点是最末尾那个，在这里是k-1次循环后的那个节点 ListNode ans = head; for (int i = 0; i &lt; k - 1; i++) &#123; ans = ans.next; &#125; //执行倒序逻辑 ListNode pre =null,p = head,pa; for (int i = 0; i &lt; k; i++) &#123; pa = p.next; p.next = pre; pre = p; p = pa; &#125; return ans; &#125;&#125; 136 只出现一次的数字（Easy）给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。 示例 1 ： 输入：nums &#x3D; [2,2,1] 输出：1 哈希表 这里我的思路是遍历一次然后加入哈希表进行统计，再遍历一次哈希表找出其中为1的，这样时间空间复杂度肯定都0(n)了 技巧-位运算 通过异或，因为只有两个两个的，两个相同的异或结果就是0，0和任何异或都是自身，那么所有进行异或得到的就是落单的 12345678910class Solution &#123; public int singleNumber(int[] nums) &#123; int single = 0; for (int num : nums) &#123; single ^= num; &#125; return single; &#125;&#125;","tags":["刷题笔记"]},{"title":"Collections集合篇-Map","path":"/2024/03/26/Collections集合篇-Map/","content":"HashMap 最常用的Map结构，使用的是拉链法 数据结构HashMap采用Entry数组来存储key-value,Entry有四个属性，Key，value，哈希值和下一个的指针 这里是1.8的版本，Node是Entry的一种实现 12345678910111213static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final int hash; final K key; V value; Node&lt;K,V&gt; next; Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; this.hash = hash; this.key = key; this.value = value; this.next = next; &#125;&#125; 表的数据结构就是一个个的Entry 1transient Node&lt;K,V&gt;[] table; 属性123456789101112131415161718192021222324252627282930313233/** * 初始的大小 */static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16/** * 为什么这里是2^31呢，因为hashCode是int类型的值， * 对于数组下标而言不能有负数，整数的范围就是0-2^31-1 */static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;/** * 阈值的计算参数，太多了可能会造成链表变长而降低查找效率 * 太低了可能频繁扩容也会影响效率 * 这个值是通过泊松分布计算出来的 */static final float DEFAULT_LOAD_FACTOR = 0.75f;/** * 意味着如果链表的长度大于8就要转化为红黑树 */static final int TREEIFY_THRESHOLD = 8;/** * 相反的，如果当前树节点小于6个就要将其转化为链表 */static final int UNTREEIFY_THRESHOLD = 6;/** * 链表的长度大于8且数组长度大于64转化为红黑树 */static final int MIN_TREEIFY_CAPACITY = 64; hashCode()和equals()方法首先看Object的hashCode方法： 作用：返回对象的哈希码值，用于在哈希表等数据结构中快速定位对象，提高哈希表的性能。 默认实现：Object类中的hashCode()方法默认返回对象的内存地址的哈希码值。 这个默认的方法是根据地址计算出来的，如果两个对象的hashCode()返回值相同，不一定表示这两个对象相等(一般情况下是可以说明两个对象相等)，因为可能存在哈希冲突。 哈希值不能等价于地址，因为Java是在JVM中执行的，并不是真正的地址。 12345678910111213public class Hashcode &#123; public static void main(String[] args) &#123; A a = new A(); A a1 = new A(); A a2 = a1; System.out.println(a.hashCode());//460141958 System.out.println(a1.hashCode());//1163157884 System.out.println(a2.hashCode());//1163157884 &#125;&#125; class A&#123;&#125; 我们再看HashMap重写的hashCode 这里选择高十六位和第十六位进行异或运算，是为了尽量提取全部位的特征参与哈希计算，使得其更加分散 1234static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125; int h;：定义一个整型变量 h，用于存储计算出的哈希值。 (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode())：这是一个三元运算符，用于判断给定的键是否为 null。如果键为 null，则将哈希值 h 设为 0；否则，调用键的 hashCode() 方法获取其哈希码，并将结果赋给变量 h。 (h &gt;&gt;&gt; 16)：这是一个无符号右移运算，将变量 h 的二进制表示向右移动 16 位。这么做的目的是为了增加哈希值的随机性，使得哈希值的高位和低位都参与了哈希码的计算。 (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16)：这是一个按位异或运算，将哈希值 h 和右移后的哈希值进行异或运算。按位异或运算是一种常用的混合哈希函数，用于将高位的信息与低位的信息混合在一起，增加哈希值的随机性。 return：将计算出的哈希值返回。 在put操作里面是这样判断hashcode和equals的 1p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))) 首先判断两个的哈希是否相等，如果哈希不相等那么肯定不存在冲突 如果哈希相等，可能是哈希碰撞，也可能是真的就是一样的元素，需要对具体的k进行判断 p.key &#x3D;&#x3D; key判断的是引用是否相等，也就是指针，有的时候两个类的指针指向的是同一块空间，那么这个时候就肯定是相等的 key.equals(k)判断的是内容是否相等，有的时候两个指针指得确实是不一样的，但是他们包含的内容是一样的，那么肯定也不能放进哈希表，new Student(“yyf”)和new Student(“xxy”)指针肯定是不同的，因为指向不同的内存空间，但是内容不一样。这个检测就需要equal来检测了 看源码这一段判断，书里的长篇大论都可以不看了： hashcode一致，内容不一样的两个肯定是能进哈希表的，这就是哈希碰撞 hashcode一致，equals返回true那肯定是不能进的，这里逻辑是或，就是内容或者引用满足一个相等就不能放了 重写了hashcode，但是equals返回true是可以放进去的，因为逻辑是与 put操作123public V put(K key, V value) &#123; return putVal(hash(key), key, value, false, true);&#125; 1234static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125; 这里主要有几点注意： (n - 1) &amp; hash是怎么来的，其实这就是一个取余的操作，因为n为2的整数倍，那么n-1肯定是末尾全为1前面全为0的，用位运算会比%快 p.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; p.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))在前面已经讲过了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; //判断数组是否未初始化,这里table已经赋值给tab了，n也同理 if ((tab = table) == null || (n = tab.length) == 0) //如果未初始化，调用resize方法 进行初始化 n = (tab = resize()).length; //通过 &amp; 运算求出该数据（key）的数组下标并判断该下标位置是否有数据 /** * 这里是取余操作，位运算更快 * 由于n必然是2的倍数，那么-1就是除了最高位其他都为1，这个时候就相当于掩码，与hash进行与运算 * 就可以得到余数，非常神奇 */ if ((p = tab[i = (n - 1) &amp; hash]) == null) //如果没有，直接将数据放在该下标位置 tab[i] = newNode(hash, key, value, null); //该数组下标有数据的情况 else &#123; Node&lt;K,V&gt; e; K k; //判断该位置数据的key和新来的数据是否一样 if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) //如果一样，证明为修改操作，该节点的数据赋值给e,后边会用到 e = p; //判断是不是红黑树 else if (p instanceof TreeNode) //如果是红黑树的话，进行红黑树的操作 e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); //新数据和当前数组既不相同，也不是红黑树节点，证明是链表 else &#123; //遍历链表 for (int binCount = 0; ; ++binCount) &#123; //判断next节点，如果为空的话，证明遍历到链表尾部了 if ((e = p.next) == null) &#123; //把新值放入链表尾部 p.next = newNode(hash, key, value, null); //因为新插入了一条数据，所以判断链表长度是不是大于等于8 if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st //如果是，进行转换红黑树操作 treeifyBin(tab, hash); break; &#125; //判断链表当中有数据相同的值，如果一样，证明为修改操作 if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; //把下一个节点赋值为当前节点 p = e; &#125; &#125; //判断e是否为空（e值为修改操作存放原数据的变量） if (e != null) &#123; // existing mapping for key //不为空的话证明是修改操作，取出老值 V oldValue = e.value; //一定会执行 onlyIfAbsent传进来的是false if (!onlyIfAbsent || oldValue == null) //将新值赋值当前节点 e.value = value; afterNodeAccess(e); //返回老值 return oldValue; &#125; &#125; //计数器，计算当前节点的修改次数 ++modCount; //当前数组中的数据数量如果大于扩容阈值 if (++size &gt; threshold) //进行扩容操作 resize(); //空方法 afterNodeInsertion(evict); //添加操作时 返回空值 return null;&#125; put的逻辑是： 首先判断是不是没有进行初始化，如果是第一次加入，那么resize，这里的默认长度是16，阈值为16*0.75 如果初始化了，看tab[(n - 1) &amp; hash]是否有数据，如果没有，就直接放这里；如果有那么就进行后面的逻辑 判断p.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; p.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k)))看跟当前的这个是不是一样的，如果是一样的那就进行修改，如果不是，那就要进行链表或者红黑树的添加了 如果是红黑树，那么就走红黑树的添加逻辑 如果是链表，就遍历链表，每一个都进行判断p.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; p.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k)))，如果是那就修改，如果遍历到最后了，那就添加到末尾 边走边判断是不是要超过8个了，如果遍历到的节点到第七个了，那就要树化了 最后遍历完了看是否超过扩容阈值了，如果要扩容还要扩 关于这里链表的尾插法，后续还有相关知识点 Java1.7的HashMap死循环问题jdk7的的数据结构是：数组+链表 在数组进行扩容的时候，因为链表是头插法，在进行数据迁移的过程中，有可能导致死循环 变量e指向的是需要迁移的对象 变量next指向的是下一个需要迁移的对象 Jdk1.7中的链表采用的头插法 在数据迁移的过程中并没有新的对象产生，只是改变了对象的引用 产生死循环的过程： 线程1和线程2的变量e和next都引用了这个两个节点 线程2扩容后，由于头插法，链表顺序颠倒，但是线程1的临时变量e和next还引用了这两个节点 第一次循环 由于线程2迁移的时候，已经把B的next执行了A 第二次循环 第三次循环 参考回答： 在jdk1.7的hashmap中在数组进行扩容的时候，因为链表是头插法，在进行数据迁移的过程中，有可能导致死循环 比如说，现在有两个线程 线程一：读取到当前的hashmap数据，数据中一个链表，在准备扩容时，线程二介入 线程二：也读取hashmap，直接进行扩容。因为是头插法，链表的顺序会进行颠倒过来。比如原来的顺序是AB，扩容后的顺序是BA，线程二执行结束。 线程一：继续执行的时候就会出现死循环的问题。 线程一先将A移入新的链表，再将B插入到链头，由于另外一个线程的原因，B的next指向了A， 所以B-&gt;A-&gt;B,形成循环。 当然，JDK 8 将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），尾插法，就避免了jdk7中死循环的问题。","tags":["Java"]},{"title":"Collections集合篇-List","path":"/2024/03/26/Collections集合篇-List/","content":"今天开始学习Java基础八股文，先从我用的最多的一个数据结构开始看起。虽然我学Java接触了这个概念快两三年了，但是不看源码还是不知道ArrayList的具体实现。 Collections集合分为两大类，Collection是单列集合，包含常用的Set，List，Queue等，其中Set里面使用HashSet比较多，List里面使用Arraylist比较多，Queue中有一个优先队列PriorityQueue的概念。 Set：HashSet，LinkedHashSet，SortedSet和继承其的TreeSet List：ArrayList，LinkedList，Vector Queue：PriorityQueue 还有一类是双列集合Map，使用的比较多的有HashMap，LinkedHashMap，TreeMap，HashTable List首先我们先复习一下顺序存储和链式存储的区别以及时间复杂度和空间复杂度。 顺序存储：支持随机查找，空间连续，数据密度大（不像链表那样有额外的指针空间），删除和插入麻烦，不适合频繁在其中删除插入 插入：如果在表尾就不需要移动元素为o(1)，如果是在内部，需要移动的期望为 (1+2+3+…+n)&#x2F;(n+1) &#x3D; n(n+1)&#x2F;2(n+1) &#x3D; n&#x2F;2，时间复杂度为o(n)。 删除：如果在表尾删除也不用移动，如果在内部，期望为 (1+2+…+n-1)&#x2F;n &#x3D; n(n-1)&#x2F;2n &#x3D; (n-1)&#x2F;2 也是o(n) 查找：平均查找期望 (1+2+..+n)&#x2F;n &#x3D; (n+1)&#x2F;2 也为o(n) 链式存储：不支持随机查找，但是相对于顺序的插入和删除效率还是高那么一点，空间不连续，数据的密度小，因为要存指针。 插入：插入这个操作本身是o(1)的只需要改指针，但是要找到这个插入的位置是需要o(n)，删除同理。 查找：不支持随机查找，每次找都需要从头开始找(双向链表可以解决这个问题)，也是o(n) ArrayList ArrayList和Vector是基于数组实现的，但是是动态的，每次添加之前都要判断是否下一个就要超过了，如果溢出就要重新开辟一个更长的数组。 成员变量123456789101112131415161718/** * 默认的初始容量为10 */private static final int DEFAULT_CAPACITY = 10;/** * 如果初始化为new ArrayList(n)，但是还没有在这个里面加东西的时候，elementData就是这个 */private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;/** * 如果初始化为new ArrayList()，但是还没有元素添加的时候，就是这个Default，为了和上面的区分开 */private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;/** * 实际存储的数组结构 */transient Object[] elementData;private int size; 构造方法 当initialCapacity给了是0或者没有提供的时候，不进行实例化，等到有元素进来了在进行扩容 1234567891011121314151617181920212223/** * 有参数的：只要有这个参数就是EMPTY_ELEMENTDATA，跟下面这个区分开 * 可以按照指定容量初始化 */public ArrayList(int initialCapacity) &#123; if (initialCapacity &gt; 0) &#123; this.elementData = new Object[initialCapacity]; &#125; else if (initialCapacity == 0) &#123; this.elementData = EMPTY_ELEMENTDATA; &#125; else &#123; throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+ initialCapacity); &#125;&#125;/** * 无参数构造方法：DEFAULTCAPACITY_EMPTY_ELEMENTDATA来区分 */public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&#125; add添加方法流程123456public boolean add(E e) &#123; //每一次加之前先检查size+1不会大于数组最大值 ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true;&#125; 12345private void ensureCapacityInternal(int minCapacity) &#123; //calculateCapacity(elementData, minCapacity)如果是无参的返回就是10 //如果不是返回的就是minCapacity ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));&#125; 123456789private static int calculateCapacity(Object[] elementData, int minCapacity) &#123; //如果是无参的初始化，那么就在当前这个容量和10之间选一个最大的 //但是一般来说第一个元素size肯定是0吧，这里传来的minCapacity估计是1 //所以第一次应该是初始化10个，对于无参构造方法而言 if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; return Math.max(DEFAULT_CAPACITY, minCapacity); &#125; return minCapacity;&#125; 123456789private void ensureExplicitCapacity(int minCapacity) &#123; //操作次数，一个内部变量 modCount++; // overflow-conscious code //如果有增大的需求，即现在的需求已经比现长度大了 if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125; 1234567891011121314private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; //1.5倍，oldCapacity右移一位代表/2，1+0.5 int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); //只有第一次会这样minCapacity给的是10，这个肯定是&lt;0 if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: //然后拷贝一份这个数组 elementData = Arrays.copyOf(elementData, newCapacity);&#125; ArrayList的线程不安全问题 ArrayList不是线程安全的 非同步操作： ArrayList 的方法并没有进行同步处理，因此在多线程环境下，多个线程可以同时访问和修改 ArrayList 的状态。 不保证操作的原子性： ArrayList 的操作（例如添加、删除、修改元素等）并不是原子操作，它们可能会分解成多个步骤。在多线程环境下，如果一个线程在执行操作的过程中被另一个线程中断，可能会导致数据不一致的情况发生 迭代器不支持并发修改： 在使用迭代器遍历 ArrayList 的过程中，如果其他线程对 ArrayList 进行了结构性修改（如添加或删除元素），则会抛出 ConcurrentModificationException 异常 举个例子，这里会报错，CopyOnWriteArrayList就不会 12345678910111213141516171819public static void main(String[] args) &#123; ArrayListTest arrayListTest = new ArrayListTest(); VectorTest vectorTest = new VectorTest(); for (int i = 0; i &lt; 10; i++) &#123; new Thread(() -&gt; &#123; for (int j = 0; j &lt; 1000; j++) &#123; arrayListTest.insert(j); &#125; System.out.println(arrayListTest.getSize()); &#125;).start(); &#125; // 等待所有线程执行完毕 try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125; 有几种解决方法 CopyOnWriteArrayList：使用 java.util.concurrent 包中提供的线程安全的集合类，例如 CopyOnWriteArrayList，它通过在写操作时复制整个数组来实现线程安全，适用于读多写少的场景。 12List&lt;String&gt; threadSafeList = new CopyOnWriteArrayList&lt;&gt;(); 使用同步机制： 使用 Collections 工具类提供的 synchronizedList 方法，将 ArrayList 包装成一个同步的 List，这样可以保证在多线程环境下对 ArrayList 的操作是线程安全的，但性能可能会受到影响。12List&lt;String&gt; synchronizedList = Collections.synchronizedList(new ArrayList&lt;&gt;()); 几个面试题new ArrayList(10)grow了几次答：0次，因为这个在有参构造函数里面已经有了 new ArrayList(0)和new ArrayList()在第一次扩容后都是多少new ArrayList()和new ArrayList(0)执行完之后elementData都是空数组，但是这两个空数组的内存地址是不一样的。if (elementData &#x3D;&#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA) 这一段代码在new(0)的时候是不会走的，因为比的是地址，所以返回值是1，最后结果也是1所以new ArrayList(0)第一次扩容是1，new ArrayList()第一次扩容是10 数组和list之间的转换？ 数组-&gt;list:Arrays.asList() list-&gt;数组: list.toArray(n) 数组转List ，使用JDK中java.util.Arrays工具类的asList方法 List转数组，使用List的toArray方法。无参toArray方法返回 Object数组，传入初始化长度的数组对象，返回该对象数组 用Arrays.asList转List后，如果修改了数组内容，list受影响吗Arrays.asList转换list之后，如果修改了数组的内容，list会受影响，因为它的底层使用的Arrays类中的一个内部类ArrayList来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址 List用toArray转数组后，如果修改了List内容，数组受影响吗list用了toArray转数组后，如果修改了list内容，数组不会影响，当调用了toArray以后，在底层是它是进行了数组的拷贝，跟原来的元素就没啥关系了，所以即使list修改了以后，数组也不受影响 LinkedList特点： 基于双向链表实现 也符合链式存储的一系列优缺点 线程不安全，因为是链表，如何安全呢，跟上面的ArrayList一样使用Collections.synchronizedList(new ArrayList&lt;&gt;()); Vector特点： 也是基于顺序存储（数组结构），但是增长的策略与ArrayList不同，而且每次增长2倍 线程安全，这使其性能略逊于ArrayList Stack是基于Vector的 对比 名称 基于数据结构 线程是否安全 ArrayList 数组 否 Vector 数组 是 LinkedList 双向链表 否","tags":["Java"]},{"title":"leetcode-2024-3-26","path":"/2024/03/26/leetcode-2024-3-26/","content":"2642 设计可以求最短路径的图类（Hard） 题目太长了就换成图片了 迪杰斯特拉 我自己的做法是Dijkstra+邻接矩阵，还可以有Floyd，考虑到这个邻接矩阵都已经内存99%了，所以应该矩阵+Floyd是最佳方案 就当是复习Dijkstra了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182class Graph &#123; private int[][] matrix; private int[] finalArr; private int[] visited; //用邻接矩阵表示图 public Graph(int n, int[][] edges) &#123; matrix = new int[n][n]; for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (i != j)&#123; matrix[i][j] = Integer.MAX_VALUE; &#125; &#125; &#125; for (int i = 0; i &lt; edges.length; i++) &#123; matrix[edges[i][0]][edges[i][1]] = edges[i][2]; &#125; &#125; //增加一条边就是再改一个值 public void addEdge(int[] edge) &#123; matrix[edge[0]][edge[1]] = edge[2]; &#125; /** * Dijkstra，n次找到n个最短路径，所以需要一个visited矩阵保存已经找到最短路径的点 * finalArr存放最短路径，初始化为初始点的邻接数组，每次找到其中最小的 * 更新距离 * @param node1 * @param node2 * @return */ public int shortestPath(int node1, int node2) &#123; finalArr = matrix[node1].clone(); visited = new int[matrix.length]; //System.out.println(Arrays.toString(finalArr)); int k = node1; for (int i = 0; i &lt; matrix.length-1; i++) &#123; visited[k] = 1; int[] adj = getMin(finalArr); k = adj[0]; int price = adj[1]; //如果这里返回-1说明找不到最小值，最小值都已经是正无穷了 //说明此时其他的都已经最优，直接跳出循环 if (k ==-1)&#123; break; &#125; for (int j = 0; j &lt; matrix.length; j++) &#123; if (matrix[k][j] != Integer.MAX_VALUE&amp;&amp;price != Integer.MAX_VALUE &amp;&amp; visited[j] == 0 &amp;&amp; matrix[k][j]+price &lt; finalArr[j])&#123; finalArr[j] = matrix[k][j]+price; &#125; &#125; //System.out.println(Arrays.toString(finalArr)); &#125; if (finalArr[node2] == Integer.MAX_VALUE)&#123; return -1; &#125;else &#123; return finalArr[node2]; &#125; &#125; public int[] getMin(int[] arr)&#123; int min = Integer.MAX_VALUE; int vexNum = -1; for (int i = 0; i &lt; arr.length; i++) &#123; if (visited[i] ==0 &amp;&amp; arr[i] != 0)&#123; if (arr[i] &lt;min)&#123; min = arr[i]; vexNum = i; &#125; &#125; &#125; return new int[]&#123;vexNum,min&#125;; &#125;&#125;/** * Your Graph object will be instantiated and called as such: * Graph obj = new * Graph(n, edges); * obj.addEdge(edge); * int param_2 = obj.shortestPath(node1,node2); */ 矩阵置零（Medium） 广度优先搜索 其实本来是想多源广度优先搜索的，后来发现好像不用这复杂。直接暴力每一行每一列都变成0就可以了 12345678910111213141516171819202122class Solution &#123; public void setZeroes(int[][] matrix) &#123; //存储在里面找到的0 List&lt;int[]&gt; points = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; matrix.length; i++) &#123; for (int j = 0; j &lt; matrix[0].length; j++) &#123; if (matrix[i][j] == 0)&#123; points.add(new int[]&#123;i,j&#125;); &#125; &#125; &#125; //遍历每一个0，使其横竖都变为0 for(int[] point:points)&#123; for (int i = 0; i &lt; matrix.length; i++) &#123; matrix[i][point[1]] = 0; &#125; for (int j = 0; j &lt; matrix[0].length; j++) &#123; matrix[point[0]][j] = 0; &#125; &#125; &#125;&#125; row为行，col为列 时间复杂度：o(row*col) 空间复杂度：o(row+col) 130 被围绕的区域（Medium） 深度优先搜索 主要思路是，首先找到一个区域先把其全部变为X，用一个数组保存，如果这个区域里面包含在边界的块，那么这个数组用于后续再把他变为O 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class Solution &#123; List&lt;int[]&gt; points = new ArrayList&lt;&gt;(); List&lt;List&lt;int[]&gt;&gt; list = new ArrayList&lt;&gt;(); public void solve(char[][] board) &#123; for (int i = 0; i &lt; board.length; i++) &#123; for (int j = 0; j &lt; board[0].length; j++) &#123; if (board[i][j] == &#x27;O&#x27;)&#123; points = new ArrayList&lt;&gt;(); //如果有链接到边界,随后把这些改回来 if (!dfs(board,i,j))&#123; list.add(points); &#125; &#125; &#125; &#125; for (List&lt;int[]&gt; points:list)&#123; for (int[] point:points)&#123; board[point[0]][point[1]] = &#x27;O&#x27;; &#125; &#125; //System.out.println(Arrays.deepToString(board)); &#125; //一个区域块，首先全部变为X，返回真在后续把他变回O public boolean dfs(char[][] board,int i,int j)&#123; if (board[i][j] == &#x27;O&#x27;)&#123; boolean temp = true; points.add(new int[]&#123;i,j&#125;); board[i][j] = &#x27;X&#x27;; if (i == 0||j==0||i==board.length-1||j==board[0].length-1)&#123; temp = false; &#125; if (i+1&lt;=board.length-1)&#123; temp &amp;= dfs(board,i+1,j); &#125; if (i-1 &gt;=0)&#123; temp &amp;= dfs(board,i-1,j); &#125; if (j+1 &lt;= board[0].length-1)&#123; temp &amp;= dfs(board,i,j+1); &#125; if (j-1 &gt;= 0)&#123; temp &amp;= dfs(board,i,j-1); &#125; return temp; &#125; else &#123; return true; &#125; &#125;&#125; 时间复杂度：o(mn)空间复杂度：o(mn) 还有两题太简单了我就当复习了排序链表快速排序12345678910111213141516171819202122232425262728293031class Solution &#123; public int[] sortArray(int[] nums) &#123; quickSort(nums,0,nums.length-1); return nums; &#125; public void quickSort(int[] nums,int head,int rear)&#123; if (head &lt; rear)&#123; int mid = partition(nums,head,rear); quickSort(nums,head,mid-1); quickSort(nums,mid+1,rear); &#125; &#125; public int partition(int[] arr,int head,int rear)&#123; int temp = arr[head]; while(head &lt; rear)&#123; //主要是要记得这里是每个都要带=， while (head &lt; rear &amp;&amp; arr[rear] &gt;= temp)&#123; rear--; &#125; arr[head] = arr[rear]; while (head &lt; rear &amp;&amp; arr[head] &lt;= temp)&#123; head++; &#125; arr[rear] = arr[head]; &#125; arr[head] = temp; //System.out.println(Arrays.toString(arr)); return head; &#125;&#125;","tags":["刷题笔记"]},{"title":"leetcode-2024-3-25","path":"/2024/03/25/leetcode-2024-3-25/","content":"518 零钱兑换2（Medium）给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。 请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。 假设每一种面额的硬币有无限个。 题目数据保证结果符合 32 位带符号整数。 示例 1： 输入：amount &#x3D; 5, coins &#x3D; [1, 2, 5] 输出：4 解释：有四种方式可以凑成总金额： 5&#x3D;5 5&#x3D;2+2+1 5&#x3D;2+1+1+1 5&#x3D;1+1+1+1+1 很愚蠢的暴力解：DFS（8&#x2F;28） 最搞笑的是我点了一个运行，然后吃完饭都没有算出结果来，我愿称之为最暴力的一集 本意是深度优先搜索，然后将路径上的值保存进哈希表，哈希表记录的是硬币和个数，如果最后能全部找完，就把当前哈希表存到set里面（其实让我意想不到的是这样子set也可以去重） 这种方法要重复计算太多次了，可以优化成右边的有向无环图，但是就这个题而言完全没必要这么复杂。 1234567891011121314151617181920212223242526272829303132333435363738394041//hashmap用来放具体找零private HashMap&lt;Integer,Integer&gt; hashMap = new HashMap&lt;&gt;();//set去重private Set&lt;HashMap&lt;Integer,Integer&gt;&gt; set = new HashSet&lt;&gt;();public int change1(int amount, int[] coins) &#123; Arrays.sort(coins); dfs(amount,coins); return set.size();&#125;public void dfs(int amount,int[] coins)&#123; //可以找完，放进set里面 if (amount == 0)&#123; set.add(new HashMap&lt;&gt;(hashMap)); return; &#125; //不能用已有的找零了，失败 if (amount &lt; coins[0])&#123; return; &#125; //递归遍历每一种情况 for (int i = 0; i &lt; coins.length; i++) &#123; //先加入hashmap if (!hashMap.containsKey(coins[i]))&#123; hashMap.put(coins[i],1); &#125; else &#123; Integer integer = hashMap.get(coins[i]); hashMap.replace(coins[i],integer+1); &#125; dfs(amount-coins[i],coins); //后续递归再删除回到上一层，保证每个循环都是一样的 int temp = hashMap.get(coins[i]); if (temp == 1)&#123; hashMap.remove(coins[i]); &#125; else &#123; hashMap.put(coins[i],temp-1); &#125; &#125;&#125; 动态规划（其实就是跳房子游戏） 问题一：我对这道题的主要纠结点在于，比如11，硬币有1，2，5，理应找dp[10],dp[9],dp[6],但是我们不知道这里面是不是可能造成重复，事实上dp[9]里面肯定也会只使用一个5，对于dp[6]的情况来说只是改了顺序 如何解决？我们不再遍历11而遍历硬币，这样就能保证在遍历到当前硬币之前不会有这个路径出现。每一次遍历都是如何通过当前的这个硬币换到现在的钱，自然而然得到转移方程，dp[j] +&#x3D; dp[j-coins[i]]; 1234567891011121314class Solution &#123; public int change(int amount, int[] coins) &#123; int[] dp = new int[amount+1]; dp[0] = 1; for (int i = 0; i &lt; coins.length; i++) &#123; for (int j = coins[i]; j &lt; dp.length; j++) &#123; dp[j] += dp[j-coins[i]]; &#125; &#125; return dp[dp.length-1]; &#125;&#125; 看完后其实是有恍然大雾的感觉，多看多学。 合并K个有序链表（Hard）给你一个链表数组，每个链表都已经按升序排列。 请你将所有链表合并到一个升序链表中，返回合并后的链表。 实在不明白这个题怎么会是hard，给我刷战绩的题 其实还不够快，如果用分治法可以logn 队列 两两合并然后入队，直到队里面只有一个，就是答案 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758class Solution &#123; public ListNode mergeKLists(ListNode[] lists) &#123; //判断是否为空 if (lists.length == 0)&#123; return null; &#125; Queue&lt;ListNode&gt; queue = new ArrayDeque&lt;&gt;(); for (int i = 0; i &lt; lists.length; i++) &#123; if (lists[i] != null)&#123; queue.add(lists[i]); &#125; &#125; //这里也被卡了一下，如果长度是0就不能进行下面的步骤 if (queue.isEmpty())&#123; return null; &#125; while (queue.size() != 1)&#123; ListNode listNode1 = queue.poll(); ListNode listNode2 = queue.poll(); if (listNode1 != null &amp;&amp; listNode2 != null)&#123; queue.add(merge(listNode1,listNode2)); &#125; &#125; return queue.poll(); &#125; /** * 两个链表合并，基本方法 * @param listNode1 * @param listNode2 * @return */ public ListNode merge(ListNode listNode1,ListNode listNode2)&#123; //用了一个头节点方便保存 ListNode temp = new ListNode(); ListNode ans = temp; while (listNode1!=null &amp;&amp; listNode2!=null)&#123; if (listNode1.val &lt;= listNode2.val)&#123; temp.next = listNode1; listNode1 = listNode1.next; &#125; else &#123; temp.next = listNode2; listNode2 = listNode2.next; &#125; temp = temp.next; &#125; //接上没遍历到的 if (listNode1 != null)&#123; temp.next = listNode1; &#125; if (listNode2 != null)&#123; temp.next = listNode2; &#125; return ans.next; &#125;&#125; 搜索二维矩阵2（Medium）编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性： 每行的元素从左到右升序排列。 每列的元素从上到下升序排列。 二维双指针 我们可以观察到，从下往上数每一行第一个元素，如果比目标大就可以删除了，同理每一列从后往前数第一个元素，如果大也可以删除了。这样就得到了一个新矩阵。 接着找新矩阵最后一行的元素，从前往后数如果比目标小也可以删除了，然后最后一列，从上到下比目标小的也可以删除。 这样完成一次循环，减少了很大的搜索范围。一直收敛到只有一行或者一列。 这里用了小技巧，对于找不到的元素肯定是会数组下标抛异常的，catch到了肯定是没有的，返回假 还有有一个小问题，当我们面对[[5,6,9],[9,10,11],[11,14,18]]这样的数组，有两个9，这时候我们就永远满足不了循环条件出不来了，为了解决需要看循环里面四个指针是否变化，如果没变就说明发生了这种情况。直接跳出循环。而出现这种情况的原因就是因为有两个一样的目标值，那肯定返回真。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556class Solution &#123; public boolean searchMatrix(int[][] matrix, int target) &#123; int row_top = 0,row_bottom = matrix.length-1,col_left = 0,col_right = matrix[0].length-1; boolean flag = false; try &#123; while (row_top &lt; row_bottom &amp;&amp; col_left &lt; col_right)&#123; //判断是否指针有变化 int temp = 0; while (matrix[row_bottom][col_left] &gt; target)&#123; temp++; row_bottom--; &#125; while (matrix[row_top][col_right] &gt; target)&#123; temp++; col_right--; &#125; while (matrix[row_bottom][col_left] &lt; target)&#123; temp++; col_left++; &#125; while (matrix[row_top][col_right] &lt;target)&#123; temp++; row_top++; &#125; if (temp == 0)&#123; flag = true; break; &#125; &#125; //System.out.println(row_top+&quot; &quot;+row_bottom+&quot; &quot;+col_left+&quot; &quot;+col_right); if (row_top == row_bottom)&#123; for (int i = col_left; i &lt;=col_right; i++) &#123; if (matrix[row_bottom][i] == target)&#123; flag = true; break; &#125; &#125; &#125; if (col_left == col_right)&#123; for (int i = row_top; i &lt;= row_bottom; i++) &#123; if (matrix[i][col_right] == target)&#123; flag = true; break; &#125; &#125; &#125; return flag; &#125; //小技巧 catch (ArrayIndexOutOfBoundsException e)&#123; return false; &#125; &#125;&#125; 这道题做出来其实有点侥幸，很多情况都是错了以后试验出来的。据他们所说这样还不如遍历整体找结果。 54 螺旋矩阵（Medium）给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。 非常好理解的一道题，根据上一题的思路很快就能写出，但是这里不用频繁维护四个指针，只用在循环末尾使用就可以。 就跟洋葱一样，每次都剥掉最外一层 双指针123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution &#123; public List&lt;Integer&gt; spiralOrder(int[][] matrix) &#123; List&lt;Integer&gt; ans = new ArrayList&lt;&gt;(); int row_top = 0,row_bottom = matrix.length-1,col_left = 0,col_right = matrix[0].length-1; while (row_top &lt; row_bottom &amp;&amp; col_left &lt; col_right)&#123; for (int i = col_left; i &lt; col_right; i++) &#123; ans.add(matrix[row_top][i]); &#125; for (int i = row_top; i &lt; row_bottom; i++) &#123; ans.add(matrix[i][col_right]); &#125; for (int i = col_right; i &gt; col_left ; i--) &#123; ans.add(matrix[row_bottom][i]); &#125; for (int i = row_bottom; i &gt; row_top; i--) &#123; ans.add(matrix[i][col_left]); &#125; //换到内层 row_top++; row_bottom--; col_left++; col_right--; &#125; //特判。如果都相等，说明中间只有一个元素 if (row_top == row_bottom &amp;&amp; col_left == col_right)&#123; ans.add(matrix[row_top][col_right]); &#125; else &#123; //一行 if (row_top == row_bottom)&#123; for (int i = col_left; i &lt;= col_right; i++) &#123; ans.add(matrix[row_top][i]); &#125; &#125; //一列 if (col_left == col_right)&#123; for (int i = row_top; i &lt;= row_bottom; i++) &#123; ans.add(matrix[i][col_left]); &#125; &#125; &#125; return ans; &#125;&#125; 59 螺旋矩阵2（Medium）给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。 这个比上面的更简单了，一个计数器，然后根据上面的逻辑转圈，每次都+1，就可以了，甚至没有中间是一行或者一列的情况，要不就是没有要不就只有一个。 1234567891011121314151617181920212223242526272829303132333435363738394041class Solution &#123; public int[][] generateMatrix(int n) &#123; int[][] matrix = new int[n][n]; int count = 1; int row_top = 0,row_bottom = matrix.length-1,col_left = 0,col_right = matrix[0].length-1; while (row_top &lt; row_bottom &amp;&amp; col_left &lt; col_right)&#123; for (int i = col_left; i &lt; col_right; i++) &#123; matrix[row_top][i] = count++; &#125; for (int i = row_top; i &lt; row_bottom; i++) &#123; matrix[i][col_right]= count++; &#125; for (int i = col_right; i &gt; col_left ; i--) &#123; matrix[row_bottom][i]= count++; &#125; for (int i = row_bottom; i &gt; row_top; i--) &#123; matrix[i][col_left]= count++; &#125; row_top++; row_bottom--; col_left++; col_right--; &#125; if (row_top == row_bottom &amp;&amp; col_left == col_right)&#123; matrix[row_top][col_right]= count++; &#125; else &#123; if (row_top == row_bottom)&#123; for (int i = col_left; i &lt;= col_right; i++) &#123; matrix[row_top][i]= count++; &#125; &#125; if (col_left == col_right)&#123; for (int i = row_top; i &lt;= row_bottom; i++) &#123; matrix[i][col_left]= count++; &#125; &#125; &#125; return matrix; &#125;&#125;","tags":["刷题笔记"]},{"title":"周赛2024-3-24","path":"/2024/03/24/周赛2024-3-24/","content":"陆陆续续这是第三次周赛，第一次是虚拟的我瞎写ac了两题，上一次也是ac两题因为起得太晚了。这次稍微一点点进步，ac两个半，第三题有思路但是暴力超时，是因为我没见过这种数据结构。 Hard就跳了吧 第一题：每个字符最多出现两次的最长子字符串给你一个字符串 s ，请找出满足每个字符最多出现两次的最长子字符串，并返回该 子字符串 的 最大 长度。 示例 1： 输入： s &#x3D; “bcbbbcba” 输出： 4 解释： 以下子字符串长度为 4，并且每个字符最多出现两次：”bcbbbcba”。 遍历每个字串，判断是否字符只出现两次 12345678910111213141516171819202122232425262728293031323334class Solution &#123; public int maximumLengthSubstring(String s) &#123; int max = 2; for (int k = s.length(); k &gt;=1; k--) &#123; for (int i = 0; i &lt; s.length() - k; i++) &#123; String sub = s.substring(i,i+k+1); //如果没有返回false if (judge(sub))&#123; max = Math.max(max,sub.length()); &#125; &#125; &#125; return max; &#125; //判断字串是否只出现两次，用哈希表实现，如果哈希表超过2就返回false public boolean judge(String s)&#123; HashMap&lt;Character,Integer&gt; map = new HashMap&lt;&gt;(); boolean flag = true; for (int i = 0; i &lt; s.length(); i++) &#123; if (!map.containsKey(s.charAt(i)))&#123; map.put(s.charAt(i),1); &#125; else &#123; Integer integer = map.get(s.charAt(i)); if (integer &gt;= 2)&#123; flag = false; &#125; map.replace(s.charAt(i),integer+1); &#125; &#125; return flag; &#125;&#125; 第二题：执行操作使数据元素之和大于等于 K给你一个正整数 k 。最初，你有一个数组 nums &#x3D; [1] 。 你可以对数组执行以下 任意 操作 任意 次数（可能为零）： 选择数组中的任何一个元素，然后将它的值 增加 1 。 复制数组中的任何一个元素，然后将它附加到数组的末尾。 返回使得最终数组元素之 和 大于或等于 k 所需的 最少 操作次数。 示例 1： 输入：k &#x3D; 11 输出：5 解释： 可以对数组 nums &#x3D; [1] 执行以下操作： 将元素的值增加 1 三次。结果数组为 nums &#x3D; [4] 。复制元素两次。结果数组为 nums &#x3D; [4,4,4] 。最终数组的和为 4 + 4 + 4 &#x3D; 12 ，大于等于 k &#x3D; 11 。执行的总操作次数为 3 + 2 &#x3D; 5 。 数学题，假设+1的次数为x，复制的次数为y，要使得(y+1)*(x+1)&gt;&#x3D;n，而满足x+y最小 满足x+y+2最小其实也是满足x+y最小，那么就是开根号了，由基本不等式可得。 还有个问题就是这里的是整数，假如n&#x3D;29开根号是5，这个时候用6 * 6&#x3D;36就浪费了一次，只需要用5 * 6&#x3D;30就可以，需要进行特殊判断 wa了一次，因为这里如果正好开根号，就直接返回x+y了，不需要-2 1234567891011121314151617181920class Solution &#123; public int minOperations(int k) &#123; if (k ==1)&#123; return 0; &#125; int sqrt = (int) Math.sqrt(k); if (k == sqrt*sqrt)&#123; return sqrt*2-2; &#125; else &#123; if (k &lt;= sqrt *(sqrt+1))&#123; return sqrt+sqrt+1-2; &#125; else &#123; return sqrt+1+sqrt+1-2; &#125; &#125; &#125;&#125; 第三题：最高频率的 ID 高级的排序哈希集（TreeMap）不得不品 你需要在一个集合里动态记录 ID 的出现频率。给你两个长度都为 n 的整数数组 nums 和 freq ，nums 中每一个元素表示一个 ID ，对应的 freq 中的元素表示这个 ID 在集合中此次操作后需要增加或者减少的数目。 增加 ID 的数目：如果 freq[i] 是正数，那么 freq[i] 个 ID 为 nums[i] 的元素在第 i 步操作后会添加到集合中。减少 ID 的数目：如果 freq[i] 是负数，那么 -freq[i] 个 ID 为 nums[i] 的元素在第 i 步操作后会从集合中删除。请你返回一个长度为 n 的数组 ans ，其中 ans[i] 表示第 i 步操作后出现频率最高的 ID 数目 ，如果在某次操作后集合为空，那么 ans[i] 为 0 。 示例 1： 输入：nums &#x3D; [2,3,2,1], freq &#x3D; [3,2,-3,1] 输出：[3,3,2,2] 解释： 第 0 步操作后，有 3 个 ID 为 2 的元素，所以 ans[0] &#x3D; 3 。第 1 步操作后，有 3 个 ID 为 2 的元素和 2 个 ID 为 3 的元素，所以 ans[1] &#x3D; 3 。第 2 步操作后，有 2 个 ID 为 3 的元素，所以 ans[2] &#x3D; 2 。第 3 步操作后，有 2 个 ID 为 3 的元素和 1 个 ID 为 1 的元素，所以 ans[3] &#x3D; 2 。 暴力超时 hashmap维护当前的频率，每次都对其进行最小值查找，时间复杂度o(n^2) 12345678910111213141516171819202122232425class Solution &#123; public long[] mostFrequentIDs(int[] nums, int[] freq) &#123; long[] ans = new long[nums.length]; HashMap&lt;Integer,Long&gt; hashMap = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; if (!hashMap.containsKey(nums[i]))&#123; hashMap.put(nums[i], (long) freq[i]); &#125; else &#123; long integer = hashMap.get(nums[i]); hashMap.replace(nums[i],integer+freq[i]); &#125; ans[i] = getMost(hashMap); &#125; return ans; &#125; //遍历哈希找最小值 public long getMost(HashMap&lt;Integer,Long&gt; hashMap)&#123; long max = Long.MIN_VALUE; for (Map.Entry&lt;Integer,Long&gt; entry : hashMap.entrySet())&#123; max = Math.max(max,entry.getValue()); &#125; return max; &#125;&#125; TreeMap（重要） TreeMap是索引为键的有序哈希表，从小到大排序，每次维护treemap只用从最后面找到就是最大值。 这里treemap存的是频率的频率，每当有更新的时候就对应频率的值-1，如果为0了就删除，然后在加上新的 1234567891011121314151617181920212223242526272829303132class Solution &#123; public long[] mostFrequentIDs(int[] nums, int[] freq) &#123; long[] ans = new long[nums.length]; HashMap&lt;Integer,Long&gt; hashMap = new HashMap&lt;&gt;(); TreeMap&lt;Long,Integer&gt; treeMap = new TreeMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; if (!hashMap.containsKey(nums[i]))&#123; hashMap.put(nums[i], (long) freq[i]); //如果没有就默认为1，有就加上 treeMap.put((long) freq[i],treeMap.getOrDefault((long)freq[i],0)+1); &#125; else &#123; long integer = hashMap.get(nums[i]); if (treeMap.containsKey(integer))&#123; int temp = treeMap.get(integer); if (temp == 1)&#123; //如果本来就只有1了，就移除 treeMap.remove(integer); &#125; else &#123; //这里其实可以直接用put treeMap.replace(integer,temp-1); &#125; treeMap.put(integer+freq[i],treeMap.getOrDefault(integer+freq[i],0)+1); &#125; hashMap.replace(nums[i],integer+freq[i]); &#125; ans[i] = treeMap.lastKey(); &#125; return ans; &#125;&#125; 引申：前天的每日一题有一点相似","tags":["刷题笔记"]},{"title":"leetcode-2024-3-24","path":"/2024/03/24/leetcode-2024-3-24/","content":"323 零钱兑换(Medium)给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。 计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。 你可以认为每种硬币的数量是无限的。 示例 1： 输入：coins &#x3D; [1, 2, 5], amount &#x3D; 11 输出：3 解释：11 &#x3D; 5 + 5 + 1 今天的每日一题在十天前做过，过一遍就不重新做了 动态规划 dp数组存当前下标的钱可以用的最少兑换次数，如果用现在的零钱兑现不了，就为-1 dp[k] &#x3D; min{dp[i]+dp[k-1-i]} 当且仅当dp[i]和dp[k-1-i]都不为-1但是如果这个本身就可以用零钱找开，就为1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Solution &#123; public int coinChange(int[] coins, int amount) &#123; if (amount == 0)&#123; return 0; &#125; int[] dp = new int[amount+1]; for (int i = 0; i &lt; coins.length; i++) &#123; if (coins[i] &lt;= amount)&#123; dp[coins[i]] = 1; &#125; &#125; //System.out.println(Arrays.toString(dp)); for (int i = 1; i &lt;= amount; i++) &#123; if (i != 1)&#123; int head = 1; int rear = i-1; int min = Integer.MAX_VALUE; //dp[k] = min&#123;dp[i]+dp[k-1-i]&#125; 当且仅当dp[i]和dp[k-1-i]都不为-1 while (head &lt;= rear)&#123; if (dp[head] != -1 &amp;&amp; dp[rear]!=-1 &amp;&amp; dp[head] + dp[rear] &lt; min)&#123; min = dp[head]+dp[rear]; &#125; //System.out.println(i+&quot;:&quot;+dp[head] +&quot; &quot;+ dp[rear]); head++; rear--; &#125; //最小值没有改变，说明不能找的开 if (dp[i] == 0 &amp;&amp; min == Integer.MAX_VALUE)&#123; dp[i] = -1; &#125; //改变了就最小值 if (dp[i] == 0 &amp;&amp; min != Integer.MAX_VALUE)&#123; dp[i] = min; &#125; //如果这个本身就是1的话就不考虑，还是1 &#125; else &#123; if (dp[i] == 0)&#123; dp[i] = -1; &#125; &#125; &#125; //System.out.println(Arrays.toString(dp)); return dp[amount]; &#125;&#125; 238 除自身以外数组的乘积(Medium)给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。 题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在 32 位 整数范围内。 请 不要使用除法，且在 O(n) 时间复杂度内完成此题。 偷懒方法（就是用了除法） 最简单方法，所有乘积起来，当前元素只要除掉这个就可以，遍历一次就可以。0的时候要特殊判断一下，这个时候还是傻方法，遍历其他的。 12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; public int[] productExceptSelf(int[] nums) &#123; int[] ans = new int[nums.length]; if (nums.length == 1)&#123; return nums; &#125; else if (nums.length &gt; 1)&#123; int sum = nums[0]; //乘起来 for (int i = 1; i &lt; nums.length; i++) &#123; sum *=nums[i]; &#125; for (int i = 0; i &lt; nums.length; i++) &#123; if (nums[i] != 0)&#123; ans[i] = sum /nums[i]; &#125; //如果是0特判 else &#123; int front = i-1; int next = i+1; int anss = 1; while (front &gt;=0)&#123; anss*=nums[front]; front--; &#125; while (next &lt;=nums.length-1)&#123; anss*=nums[next]; next++; &#125; ans[i] = anss; &#125; &#125; &#125; return ans; &#125;&#125; 官方解：左右乘积列表 维护两个数组，L[i]是当前元素i左边的乘积，R[i]是i右边的乘积，返回的数组就是L[i]*R[i]，每次都是o（n） 12345678910111213141516171819class Solution &#123; public int[] productExceptSelf(int[] nums) &#123; int[] L = new int[nums.length]; int[] R = new int[nums.length]; int[] ans = new int[nums.length]; L[0] = 1; R[nums.length-1] = 1; for (int i = 1; i &lt; nums.length; i++) &#123; L[i] = L[i-1]*nums[i-1]; &#125; for (int j = nums.length-2; j &gt;=0 ; j--) &#123; R[j] = R[j+1]*nums[j+1]; &#125; for (int i = 0; i &lt; nums.length; i++) &#123; ans[i] = L[i] * R[i]; &#125; return ans; &#125;&#125; 11 盛最多水的容器(Medium)给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。 找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。 返回容器可以储存的最大水量。 暴力超时 遍历找最小 1234567891011class Solution &#123; public int maxArea(int[] height) &#123; int max = Integer.MIN_VALUE; for (int i = 0; i &lt; height.length-1; i++) &#123; for (int j = i+1; j &lt; height.length; j++) &#123; max = Math.max(max,(j-i)*Math.min(height[j],height[i])); &#125; &#125; return max; &#125;&#125; 官方解：双指针 感觉证明有待考察，初始左右指针一个在左边一个在右边，每次移动比较小的就可以找到。 简单理解为什么移动小的，因为本来就是取较小的，移动大的话铁定没之前大，因为距离缩短了1，移动小的还可能碰到大的使原来的变大。 123456789101112131415161718192021class Solution &#123; public int maxArea(int[] height) &#123; int head = 0; int rear = height.length-1; int max = Integer.MIN_VALUE; while (head &lt; rear)&#123; int length = rear-head; max = Math.max(max,length*Math.min(height[head],height[rear])); if (height[head]&lt;height[rear])&#123; head++; &#125; else if (height[head]&gt;height[rear])&#123; rear--; &#125; else &#123; head++; &#125; &#125; return max; &#125;&#125;","tags":["刷题笔记"]},{"title":"短期的小目标吧","path":"/2024/03/23/短期的小目标吧/","content":"这几天晚上睡不好，总在想自己保研了但是感觉也不是很开心。同专业的同学们陆陆续续出成绩，一看考本校的寥寥无几，顿时觉得自己保研好像也没什么了不起的。 总不可能一直麻痹自己，说我这两个月去做了什么事情都没干的实习，说去给学校打工赚了一些小钱。如何将这些东西变现才是最重要的，要不然我会一直不平衡。 我打算先把黑马头条那个项目狠狠重新搞一下，南方电网的也好好包装一下。 说实话，我对Redis和MongoDB和Kafka都挺感兴趣的，每天保持刷题的同时我也想多看看这方面的八股文。 暑假可以先去试试水，没有就好好安心搞12306那个微服务项目。","tags":["闲谈"]},{"title":"leetcode-2024-3-23","path":"/2024/03/23/leetcode-2024-3-23/","content":"2549 统计桌面上的不同数字(Easy)给你一个正整数 n ，开始时，它放在桌面上。在 10^9 天内，每天都要执行下述步骤： 对于出现在桌面上的每个数字 x ，找出符合 1 &lt;&#x3D; i &lt;&#x3D; n 且满足 x % i &#x3D;&#x3D; 1 的所有数字 i 。然后，将这些数字放在桌面上。返回在 10^9 天之后，出现在桌面上的 不同 整数的数目。 简单题重拳出击 正常解 发现可以进行递归，假设n&#x3D;7，那么第一次递归就是6和3，因为7%3&#x3D;1，7%6&#x3D;1，那么怎么样解决重复的问题呢，用一个set就好了。 12345678910111213141516//去重HashSet&lt;Integer&gt; hashSet = new HashSet&lt;&gt;();public int distinctIntegers(int n) &#123; dp(n); //最后返回唯一集合的长度就行 return hashSet.size();&#125;public void dp(int n)&#123; hashSet.add(n); for (int i = n-1; i &gt;=1; i--) &#123; //遍历进行递归 if (n % i ==1)&#123; distinctIntegers(i); &#125; &#125;&#125; 那是比不上最快点方法的，其实找规律直接出来就是n-1，我这个方法还算是有点编程的，自然速度快不过那些n-1的 146 LRU缓存（Medium）非常重要这道题实现LRU算法，关键是要时间复杂度和空间都是o（1） 虽然从前在os上还是手搓过这个算法的，但是这里要用常数的复杂度。 那必然是要哈希，但是哈希还不够，在搜寻在队列里面的时候必然还是要遍历，这个时候就要想到另一种数据结构，链表这里为什么用双向链表，因为前驱还是要找的，总不能每次都去遍历吧，那还是浪费一点空间吧。 哈希表+双向链表123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133class LRUCache&#123; //双向链表数据结构 class LinkNode&#123; int key; int value; //前驱 LinkNode front = null; //后继 LinkNode behind = null; LinkNode(int key,int value)&#123; this.key = key; this.value = value; &#125; LinkNode()&#123;&#125; &#125; //容量 private int capacity; //维护首尾指针 private LinkNode head,tail; //记录链表长度 private int linkSize = 0; //哈希表来根据键找到链表的具体位置 private HashMap&lt;Integer,LinkNode&gt; hashMap = new HashMap&lt;&gt;(); public LRUCache(int capacity) &#123; this.capacity = capacity; head = new LinkNode(); tail = new LinkNode(); &#125; public int get(int key) &#123; if (hashMap.containsKey(key))&#123; LinkNode linkNode = hashMap.get(key); moveToHead(linkNode); return linkNode.value; &#125; else &#123; return -1; &#125; &#125; public void put(int key, int value) &#123; //如果没到容量，就不涉及释放位置 if (linkSize &lt; capacity)&#123; //如果map没有 if (!hashMap.containsKey(key))&#123; LinkNode linkNode = new LinkNode(key,value); //头插法 handleInsert(linkNode); linkSize++; //保存这个节点 hashMap.put(key,linkNode); &#125; else &#123; LinkNode linkNode = hashMap.get(key); linkNode.value = value; moveToHead(linkNode); hashMap.replace(key,linkNode); &#125; &#125; else &#123; if (!hashMap.containsKey(key))&#123; int removeKey = handleRemove(); hashMap.remove(removeKey); LinkNode linkNode = new LinkNode(key,value); handleInsert(linkNode); hashMap.put(key,linkNode); &#125; else &#123; LinkNode linkNode = hashMap.get(key); linkNode.value = value; moveToHead(linkNode); hashMap.replace(key,linkNode); &#125; &#125; &#125; /** * 头插法 * @param linkNode 插入的节点 */ public void handleInsert(LinkNode linkNode)&#123; LinkNode temp = head.behind; //如果这是第一个节点，尾指针一直挂在这个元素上，直到被提起来rear再变 if (temp != null)&#123; linkNode.behind = temp; head.behind = linkNode; temp.front = linkNode; linkNode.front = head; &#125; //如果不是第一个，那就头插法 else &#123; head.behind = linkNode; linkNode.front = head; tail = linkNode; &#125; &#125; /** * 出队，移动尾指针即可 * @return 返回尾元素的键 */ public int handleRemove()&#123; int ans = tail.key; tail = tail.front; tail.behind = null; return ans; &#125; /** * 更新在队首 * @param linkNode */ public void moveToHead(LinkNode linkNode)&#123; //也就是在末尾的时候 if (linkNode.behind == null)&#123; tail = linkNode.front; linkNode.front.behind = null; linkNode.front = null; handleInsert(linkNode); &#125; else &#123; LinkNode left = linkNode.front; LinkNode right = linkNode.behind; left.behind = right; right.front = left; linkNode.front = null; linkNode.behind = null; handleInsert(linkNode); &#125; &#125;&#125; 大同小异这些答案，主要还是哈希+双向 283 移动零(Easy)给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 请注意 ，必须在不复制数组的情况下原地对数组进行操作。 示例 1: 输入: nums &#x3D; [0,1,0,3,12] 输出: [1,3,12,0,0] 没什么好说的这个题 直接插入排序思想1234567891011121314class Solution &#123; public void moveZeroes(int[] nums) &#123; for (int i = nums.length-2; i &gt;=0; i--) &#123; if (nums[i] == 0)&#123; int j=i+1; while (j &lt;= nums.length-1&amp;&amp;nums[j] != 0 )&#123; nums[j-1] = nums[j]; j++; &#125; nums[j-1] = 0; &#125; &#125; &#125;&#125; 236.二叉树的最近公共祖先(Medium)题目意思就是字面意思 这个题居然还没有考研那段时间做得好，这里思路就是找到这两个节点的路径序列，然后找到最近的那个重复元素就完事。 2024.3.23123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class Solution &#123; List&lt;TreeNode&gt; list1 = new ArrayList&lt;&gt;(); List&lt;List&lt;TreeNode&gt;&gt; list = new ArrayList&lt;&gt;(); public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; hxbl(root,p); hxbl(root,q); return findSame(list.get(0),list.get(1)); &#125; /** * 标准的（+left+&#123;&#125;+right+)结构 * @param root * @param target */ public void hxbl(TreeNode root,TreeNode target)&#123; list1.add(root); if (root.val == target.val)&#123; list.add(new ArrayList&lt;&gt;(list1)); &#125; if (root.left != null)&#123; hxbl(root.left,target); &#125; if (root.right != null)&#123; hxbl(root.right,target); &#125; list1.remove(list1.size()-1); &#125; /** * 找到这两个序列的最近元素，要从后往前，碰到了就break * @param list1 * @param list2 * @return */ public TreeNode findSame(List&lt;TreeNode&gt; list1, List&lt;TreeNode&gt; list2)&#123; for (int i = list1.size()-1; i &gt;=0; i--) &#123; for (int j = list2.size()-1; j &gt;=0; j--) &#123; if (list1.get(i).val == list2.get(j).val)&#123; return list1.get(i); &#125; &#125; &#125; return null; &#125; &#125; 2023.8.31234567891011121314151617181920212223242526272829303132333435363738class Solution &#123; List&lt;TreeNode&gt; treeList = new ArrayList&lt;&gt;(); public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; find(root,p); List&lt;TreeNode&gt; treeList1 = new ArrayList&lt;&gt;(treeList); treeList = new ArrayList&lt;&gt;(); find(root,q); List&lt;TreeNode&gt; treeList2 = new ArrayList&lt;&gt;(treeList); boolean flag = true; if (treeList1.size()&gt;treeList2.size())&#123; flag = false; &#125; for (int i = 0;i&lt;Math.max(treeList1.size(),treeList2.size());i++)&#123; if (!flag &amp;&amp; treeList2.contains(treeList1.get(i)))&#123; return treeList1.get(i); &#125; if (flag &amp;&amp; treeList1.contains(treeList2.get(i)))&#123; return treeList2.get(i); &#125; &#125; return null; &#125; public boolean find(TreeNode root,TreeNode p)&#123; if (root!=null)&#123; boolean left = find(root.left,p); boolean right = find(root.right,p); if (root == p||left||right)&#123; treeList.add(root); return true; &#125; else return false; &#125; else &#123; return false; &#125; &#125;&#125;","tags":["刷题笔记"]},{"title":"leetcode-2024-3-21","path":"/2024/03/21/leetcode-2024-3-21/","content":"2671 频率跟踪器(Medium)请你设计并实现一个能够对其中的值进行跟踪的数据结构，并支持对频率相关查询进行应答。 实现 FrequencyTracker 类： FrequencyTracker()：使用一个空数组初始化 FrequencyTracker 对象。 void add(int number)：添加一个 number 到数据结构中。 void deleteOne(int number)：从数据结构中删除一个 number 。数据结构 可能不包含 number ，在这种情况下不删除任何内容。 bool hasFrequency(int frequency): 如果数据结构中存在出现 frequency 次的数字，则返回 true，否则返回 false。 示例 1： 输入 [“FrequencyTracker”, “add”, “add”, “hasFrequency”] [[], [3], [3], [2]] 输出 [null, null, null, true] 解释 FrequencyTracker frequencyTracker &#x3D; new FrequencyTracker(); frequencyTracker.add(3); &#x2F;&#x2F; 数据结构现在包含 [3] frequencyTracker.add(3); &#x2F;&#x2F; 数据结构现在包含 [3, 3] frequencyTracker.hasFrequency(2); &#x2F;&#x2F; 返回 true ，因为 3 出现 2 次 双哈希 一个用来存频率，一个用来存频率的频率 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495public class FrequencyTracker &#123; private HashMap&lt;Integer,Integer&gt; hashMap; private TreeMap&lt;Integer,Integer&gt; treeMap; public FrequencyTracker() &#123; hashMap = new HashMap&lt;&gt;(); treeMap = new TreeMap&lt;&gt;(); &#125; public void add(int number) &#123; if (!hashMap.containsKey(number))&#123; hashMap.put(number,1); treeMap.put(1,treeMap.getOrDefault(1,0)+1); &#125; else &#123; Integer integer = hashMap.get(number); hashMap.put(number,integer+1); if (treeMap.containsKey(integer))&#123; int count = treeMap.get(integer); if (count == 1)&#123; treeMap.remove(integer); &#125; else&#123; treeMap.replace(integer,count-1); &#125; treeMap.put(integer+1,treeMap.getOrDefault(integer+1,0)+1); &#125; &#125; &#125; public void deleteOne(int number) &#123; if (hashMap.containsKey(number))&#123; int i1 = hashMap.get(number); int temp = treeMap.get(i1); if (temp == 1)&#123; treeMap.remove(i1); &#125; else &#123; treeMap.replace(i1,temp-1); &#125; if (i1-1 !=0)&#123; if (treeMap.containsKey(i1-1))&#123; treeMap.put(i1-1,treeMap.get(i1-1)+1); &#125; else &#123; treeMap.put(i1-1,1); &#125; &#125; if (i1 == 1)&#123; hashMap.remove(number); &#125; else &#123; hashMap.put(number,i1-1); &#125; &#125; &#125; public boolean hasFrequency(int frequency) &#123; if (treeMap.containsKey(frequency))&#123; int temp = treeMap.get(frequency); if (temp &gt; 0)&#123; return true; &#125; else &#123; return false; &#125; &#125; else &#123; return false; &#125; &#125; public static void main(String[] args) &#123; FrequencyTracker frequencyTracker = new FrequencyTracker(); frequencyTracker.add(2); frequencyTracker.add(7); frequencyTracker.add(7); frequencyTracker.add(3); frequencyTracker.add(3); frequencyTracker.deleteOne(7); frequencyTracker.deleteOne(7); System.out.println(frequencyTracker.hasFrequency(2)); System.out.println(frequencyTracker.hasFrequency(1)); &#125;&#125;","tags":["刷题笔记"]},{"title":"redis实现分布式锁-初见分布式锁","path":"/2024/03/20/redis实现分布式锁-初见分布式锁/","content":"什么是分布式锁分布式锁是控制分布式系统之间同步访问共享资源的一种方式，通过互斥来保持一致性。 了解分布式锁之前先了解下线程锁和进程锁： 线程锁：主要用来给方法、代码块加锁。当某个方法或代码使用锁，在同一时刻仅有一个线程执行该方法或该代码段。线程锁只在同一JVM中有效果，因为线程锁的实现在根本上是依靠线程之间共享内存实现的，比如Synchronized、Lock等 进程锁：控制同一操作系统中多个进程访问某个共享资源，因为进程具有独立性，各个进程无法访问其他进程的资源，因此无法通过synchronized等线程锁实现进程锁 比如Golang语言中的sync包就提供了基本的同步基元，如互斥锁 但是以上两种适合在单体架构应用，但是分布式系统中多个服务节点，多个进程分散部署在不同节点机器中，此时对于资源的竞争，上诉两种对节点本地资源的锁就无效了。 这个时候就需要分布式锁来对分布式系统多进程访问资源进行控制，因此分布式锁是为了解决分布式互斥问题！","tags":["Redis"]},{"title":"leetcode-2024-3-20","path":"/2024/03/20/leetcode-2024-3-20/","content":"1969.数组元素的最小非零乘积（Medium）给你一个正整数 p 。你有一个下标从 1 开始的数组 nums ，这个数组包含范围 [1, 2p - 1] 内所有整数的二进制形式（两端都 包含）。你可以进行以下操作 任意 次： 从 nums 中选择两个元素 x 和 y 。选择 x 中的一位与 y 对应位置的位交换。对应位置指的是两个整数 相同位置 的二进制位。比方说，如果 x &#x3D; 1101 且 y &#x3D; 0011 ，交换右边数起第 2 位后，我们得到 x &#x3D; 1111 和 y &#x3D; 0001 。 请你算出进行以上操作 任意次 以后，nums 能得到的 最小非零 乘积。将乘积对 109 + 7 取余 后返回。 注意：答案应为取余 之前 的最小值。 自己没想出来，其实有思路了就是总感觉不对劲，看了答案如果继续想应该能想出来，但是问题是这个取余肯定也会困扰我很久，还有我肯定只会暴力求幂，这里的快速幂其实是很值得学习一下的 官方解：贪心+快速幂 x * y肯定是要比(x-1) * (y+1)大的，那么什么时候会有最小值呢，就是当x&#x3D;1，y变得最大的时候，对于都是二进制来说，能通过交换位来变大只能是x&#x3D;1,y&#x3D;2^(p-1)-2了，比如3位的时候，最小就是1，最大就是6，要保持x和y互为反码 那这道题就是一个纯数学问题了，每次取两个互为反码的数都能将其变成x&#x3D;1，y&#x3D;2^p-2，那么一共有多少对这样的反码对呢。n&#x3D;(2^p-2)&#x2F;2，除了最后面那个数其他都可以凑对，就有2^(p-1)-1对。p&#x3D;3的时候，就有3对，p&#x3D;4时，就有7对 也就是说，我们的最终答案是最后一个元素*（最后一个元素-1）^(2^(p-1)-1)即： 快速幂：通过观察 p&#x3D;3的时候，就有3对，p&#x3D;4时，就有7对，可以发现3就是11，7就是111，根据幂的公式x^(111)&#x3D;x^(100)*x^(010)*x^(001),答案里巧妙地用快速幂解决，也就是说，不再是暴力连乘，而是x也自己进行幂运算，就可以将复杂度降为o(log) 12345678910111213141516171819private static final int MOD = 1_000_000_007;//这里的p就是已经log后的，一共有几位，每一位都循环一次private long pow(long x, int p) &#123; x %= MOD; long res = 1; while (p-- &gt; 0) &#123; res = res * x % MOD; x = x * x % MOD; &#125; return res;&#125;public int minNonZeroProduct(int p) &#123; //移位，1L是long单位下的1，将其像左边移动p位 //得到的k就是最后一个元素 long k = (1L &lt;&lt; p) - 1; //最后一个元素*（最后一个元素-1）^(2^(p-1)-1) return (int) (k % MOD * pow(k - 1, p - 1) % MOD);&#125; 没想出来这种方法，贪心还是练习少了 49.字母异位词分组（Medium）给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。 字母异位词 是由重新排列源单词的所有字母得到的一个新单词。 示例 1: 输入: strs &#x3D; [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]输出: [[“bat”],[“nat”,”tan”],[“ate”,”eat”,”tea”]] 自己解（也是官方解）：哈希表+排序 遍历每个字符串，然后在对其排序，如果哈希表没有就加进去，list把这个排序之前的字符串放进去，有就在哈希表已有的键里面添加这个字符串。 123456789101112131415161718192021222324252627282930public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123; HashMap&lt;String,List&lt;String&gt;&gt; hashMap = new HashMap&lt;&gt;(); List&lt;List&lt;String&gt;&gt; ans = new ArrayList&lt;&gt;(); for (String s:strs)&#123; String temp = getAllStr(s); //如果表里没有就新增键值对 if (!hashMap.containsKey(temp))&#123; List&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(s); hashMap.put(temp,list); &#125; //有就在末尾添加 else &#123; List&lt;String&gt; list = hashMap.get(temp); list.add(s); hashMap.replace(temp,list); &#125; &#125; //遍历map存在list中 for (Map.Entry&lt;String,List&lt;String&gt;&gt; entry : hashMap.entrySet())&#123; ans.add(entry.getValue()); &#125; return ans;&#125;//字符串变成char数组，排序，这样就能得到唯一public String getAllStr(String s)&#123; char[] temp = s.toCharArray(); Arrays.sort(temp); return Arrays.toString(temp);&#125; 比较简单 128.最长连续序列（Medium）给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。 请你设计并实现时间复杂度为 (n) 的算法解决此问题。 示例 1： 输入：nums &#x3D; [100,4,200,1,3,2] 输出：4 解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。 暴力解：（其实是超时的，因为复杂度为o(nlogn)） 最傻逼的一集，这里Arrays.sort就已经超出复杂度了，但是居然也没超时，甚至比超过90%，感觉有点。 最简单的思路，排序然后指针，从小到大如果一直递增就计数器一直加，如果相等那就计数器不动，如果不是，那就计数器重新变为1 123456789101112131415161718192021222324252627public int longestConsecutive(int[] nums) &#123; if (nums == null)&#123; return 0; &#125; //搞笑的排序 Arrays.sort(nums); int count = 1; int max = 1; for (int i = 1; i &lt; nums.length; i++) &#123; //当且仅当当前元素是之前元素的多1 if (nums[i]==nums[i-1]+1)&#123; count++; &#125; //如果相等计数器空过 else if (nums[i] == nums[i-1]) &#123; &#125; //如果不是这样的情况就不是连续，计数器变成1 else &#123; count = 1; &#125; max = Math.max(max,count); System.out.println(count); &#125; return max;&#125; 官方解：哈希表 我们考虑枚举数组中的每个数 x，考虑以其为起点，不断尝试匹配 x+1,x+2… 是否存在，假设最长匹配到了 x+y，那么以 x 为起点的最长连续序列即为 x,x+1,x+2,x+y，其长度为 y+1，我们不断枚举并更新答案即可。 对于匹配的过程，暴力的方法是 O(n) 遍历数组去看是否存在这个数，但其实更高效的方法是用一个哈希表存储数组中的数，这样查看一个数是否存在即能优化至 O(1) 的时间复杂度。 仅仅是这样我们的算法时间复杂度最坏情况下还是会达到 O(n2)即外层需要枚举 O(n) 个数，内层需要暴力匹配 O(n) 次），无法满足题目的要求。但仔细分析这个过程，我们会发现其中执行了很多不必要的枚举，如果已知有一个 x,x+1,x+2,⋯,x+y 的连续序列，而我们却重新从 x+1，x+2 或者是 x+y 处开始尝试匹配，那么得到的结果肯定不会优于枚举 x 为起点的答案，因此我们在外层循环的时候碰到这种情况跳过即可。 那么怎么判断是否跳过呢？由于我们要枚举的数 x 一定是在数组中不存在前驱数 x−1 的，不然按照上面的分析我们会从 x−1 开始尝试匹配，因此我们每次在哈希表中检查是否存在 x−1 即能判断是否需要跳过了。 1234567891011121314151617181920212223242526public int longestConsecutive(int[] nums) &#123; Set&lt;Integer&gt; num_set = new HashSet&lt;Integer&gt;(); //先去重，用集合 for (int num : nums) &#123; num_set.add(num); &#125; int longestStreak = 0; //有下一个值的时候就跳掉，一定要没有下一个，这样遍历才是o(n) for (int num : num_set) &#123; if (!num_set.contains(num - 1)) &#123; int currentNum = num; int currentStreak = 1; //然后比较一下 while (num_set.contains(currentNum + 1)) &#123; currentNum += 1; currentStreak += 1; &#125; longestStreak = Math.max(longestStreak, currentStreak); &#125; &#125; return longestStreak;&#125; 非常巧妙的o(n),这里set查询是o(1)，需要好好学习一下，多用用哈希","tags":["刷题笔记"]},{"title":"leetcode-2024-3-19","path":"/2024/03/19/leetcode-2024-3-19/","content":"1793.好子数组的最大分数（Hard）给你一个整数数组 nums （下标从 0 开始）和一个整数 k 。 一个子数组 (i, j) 的 分数 定义为 min(nums[i], nums[i+1], …, nums[j]) * (j - i + 1) 。一个 好 子数组的两个端点下标需要满足 i &lt;&#x3D; k &lt;&#x3D; j 。 请你返回 好 子数组的最大可能 分数 。 暴力解：超出内存限制 思路：用一个二维数组，dp[i][j]表示num[i]到num[j]的最小值，起始dp[i][i]都为num[i],状态转移方程为：dp[i][j] &#x3D; min{dp[i][j-1],num[i]},其实是可以做出来的。但是这是hard，空间复杂度要求有点高，就会超内存。我的评价是动态规划很好，下次别用了 123456789101112131415161718192021222324public int maximumScore(int[] nums, int k) &#123; //二维动态规划 int[][] dp = new int[nums.length][nums.length]; //初始对角线都为自身，自己肯定是最小值 for (int i = 0; i &lt; nums.length; i++) &#123; dp[i][i] = nums[i]; &#125; for (int i = 0; i &lt; nums.length-1; i++) &#123; for (int j = i+1; j &lt; nums.length; j++) &#123; //动态转移方程 dp[i][j] = Math.min(nums[j], dp[i][j - 1]); &#125; &#125; //k要在中间，那么就是矩阵的右上角那块，i&lt;=k&lt;=j int max = Integer.MIN_VALUE; for (int i = 0; i &lt;= k; i++) &#123; for (int j = k; j &lt; nums.length; j++) &#123; int length = j-i+1; max = Math.max(max,length*dp[i][j]); &#125; &#125; //返回在右上角的最大值 return max;&#125; 官方解 ：双指针 以k为原点，head&#x3D;k-1，rear&#x3D;k+1，左开右开区间，数据长度rear-head+1，初始时长度只有1即为nums[k]本身，也为最小值。那么怎么样找包含他的最小值呢，只要找左右两边比他大的，整体的最小值就是不变的，那么长度*最小值就会有效变大，直到双指针遇到比当前最小值还要小的元素那么由于初始最小值就是本身，那么只要循环本身这个值不断递减就可以了。 123456789101112131415161718public int maximumScore(int[] nums, int k) &#123; int length = nums.length; int head = k-1,rear = k+1; int max = Integer.MIN_VALUE; for (int i = nums[k];;i--)&#123; while (head &gt;=0 &amp;&amp; nums[head] &gt;= i)&#123; head--; &#125; while (rear &lt; nums.length &amp;&amp; nums[rear] &gt;= i)&#123; rear++; &#125; max = Math.max(max,(rear-head-1)*i); if (head == -1 &amp;&amp; rear == length)&#123; break; &#125; &#125; return max;&#125; 复杂度分析 时间复杂度：O(n+C)，其中 n 是数组nums 的长度，C 是数组 nums 中元素的范围。 空间复杂度：O(1)。明显比我自己写的暴力解好","tags":["刷题笔记"]},{"title":"我的第一篇blog","path":"/2024/03/19/我的第一篇blog/","content":"做这个博客的目的是为了能激励自己，不要看了一遍就觉得自己会了。好记性不如烂笔头，刷题的思路尽量多写，很难说下次碰到一样的题目会不会忘掉。 还有25天蓝桥杯，让我这个大四老狗随便得个奖吧~~","tags":["闲谈"]},{"title":"我的收藏","path":"/collect/index.html","content":"由于自己较早制作的收藏夹对应的数据库被删除了，所以这里已经遗失了大部分内容，目前仅仅记录近期的一些收藏内容 from 2021.09 优秀博客 Figma 的技术博客：https://www.figma.com/blog/section/engineering/ Laysent 的博客：https://laysent.com/blog 综合性能优化 如何让你的 web 应用提高十倍的性能：https://blog.csdn.net/lilizhou2008/article/details/108613074 操作系统 GPU 行业研究报告：链接地址 前端 useEffect 的无限循环陷阱：https://zhuanlan.zhihu.com/p/412283445 useEffect 的不更新陷阱：https://zhuanlan.zhihu.com/p/84697185 增量 DOM 与虚拟 DOM 的对比使用：https://juejin.cn/post/6903765877296988174 react 运行时优化：https://juejin.cn/post/7010539227284766751 astro：组件级别的动态加载 (相对于 webpack 文件级别的更灵活)，可以通过可见性、路由等触发；可以直接混合使用 React&#x2F;Vue 等多种前端框架。以及还有一些其他的小的特性，比如顶层 await 支持：https://astro.build/ 安全 JavaScript 原型链污染攻击：https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto__ Node.js 一文看懂 npm、yarn、pnpm 之间的区别：https://juejin.cn/post/6844903616109641736 Why should we use pnpm (主要是使用了符号链接，所以更加快了)：https://www.kochan.io/nodejs/why-should-we-use-pnpm.html Node.JS 地下铁 https://subway.midwayjs.org/season-11.html python python 中几种构建模型方法的区别：https://zhuanlan.zhihu.com/p/144400422 一文弄懂 Pytorch 的 DataLoader, DataSet, Sampler 之间的关系：https://www.cnblogs.com/marsggbo/p/11308889.html 自定义 pytorch 中的 sampler：https://cloud.tencent.com/developer/article/1728103 PyTorch 源码解读之 DP &amp; DDP：模型并行和分布式训练解析：https://zhuanlan.zhihu.com/p/343951042 pytorch 分布式数据并行 DistributedDataParallel（DDP）：https://zhuanlan.zhihu.com/p/107139605 (比较适合 torch 入门)PyTorch 分布式训练基础–DDP 使用：https://zhuanlan.zhihu.com/p/358974461 Understanding LSTM Networks：http://colah.github.io/posts/2015-08-Understanding-LSTMs/ 数据库 NoSQL 数据库技术选型：https://dunwu.github.io/db-tutorial/nosql/nosql-selection.html CodeModCodeMod 是一个代码转换术语，以下两个项目比较适合做这个事情 gogocode https://github.com/thx/gogocode/blob/main/README-cn.md jscodeshift https://github.com/facebook/jscodeshift 交互 顶配级拖拽体验 https://zhuanlan.zhihu.com/p/505956645 视觉 免费高清无版权网站 https://pixabay.com/zh/ 工具 tldr：一个很简单的可以命令行 help 工具：https://tldr.sh/"},{"title":"tags","path":"/tags/index.html","content":"tags: 刷题笔记 Python Java 闲谈 学校杂务 Spring Kafka Redis Vue 计算机学院网站项目 地图大创项目 南方电网项目 本科毕设"}]